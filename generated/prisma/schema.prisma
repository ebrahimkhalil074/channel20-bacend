// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  name     String
  email    String    @unique
  password String
  role     Role      @default(USER)
  news     News[]
  videos   Video[]
  comments Comment[]
  likes    Like[]
}

enum Role {
  ADMIN
  USER
}

model Category {
  id     String  @id @default(uuid())
  name   String  @unique
  news   News[]
  videos Video[]
}

model News {
  id         String    @id @default(uuid())
  title      String
  content    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String
  comments   Comment[]
  likes      Like[]
}

model Video {
  id          String    @id @default(uuid())
  title       String
  videoUrl    String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  comments    Comment[]
  likes       Like[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  news   News?   @relation(fields: [newsId], references: [id])
  newsId String?

  video   Video?  @relation(fields: [videoId], references: [id])
  videoId String?
}

model Like {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  news   News?   @relation(fields: [newsId], references: [id])
  newsId String?

  video   Video?  @relation(fields: [videoId], references: [id])
  videoId String?

  @@unique([userId, newsId])
  @@unique([userId, videoId])
}
